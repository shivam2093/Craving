{"version":3,"sources":["HeaderNav.js","timer.js","Search.js","firebase.js","Login.js","App.js","serviceWorker.js","index.js","cravin.svg"],"names":["withRouter","className","src","ReactLogo","alt","to","Sp","count","food","setInterval","$","fadeOut","this","text","length","fadeIn","Search","props","state","context","latitude","longitude","userAddress","getLocation","bind","getCoordinates","reversegeocode","navigator","geolocation","getCurrentPosition","maximumAge","timeout","enableHighAccuracy","console","log","position","coords","setState","fetch","then","response","json","data","attr","results","formatted_address","window","onload","document","getElementById","click","id","type","placeholder","onClick","size","style","React","Component","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","history","useHistory","useState","email","setEmail","password","setPassword","value","onChange","event","target","preventDefault","signInWithEmailAndPassword","push","catch","e","alert","message","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.aafe98e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactLogo from './cravin.svg'\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport \"./HeaderNav.css\";\r\n\r\nfunction HeaderNav() {\r\n  return (\r\n    <nav className=\"header\">\r\n      <div className=\"appname\">\r\n\r\n\r\n\r\n        <div className=\"header__nav\">\r\n          <span className=\"mainappname\">\r\n            <img src={ReactLogo}\r\n              alt=\"hey\" className=\"Craving_logo\" />\r\n         Cravings\r\n         </span>\r\n\r\n          <Link to=\"/login\" className=\"header__link\">\r\n            <div className=\"header__options\">\r\n              <span className=\"header__optionline1\"> Login </span>\r\n            </div>\r\n          </Link>\r\n          <Link to=\"/signup1\" className=\"header__link\">\r\n            <div className=\"header__options\">\r\n              <span className=\"header__optionline1\"> SignUp </span>\r\n            </div>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default withRouter(HeaderNav);\r\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\n/*\r\n  setInterval(function () {\r\n    var rand = Math.floor(Math.random() * 4);\r\n    document.getElementById(\"key\").innerHTML = food[rand];\r\n  }, 2000);\r\n*/\r\n\r\n\r\nfunction Sp() {\r\n  var count = 0;\r\n  var food = [\"sushi?\", \"burger?\", \"beer?\", \"chinese?\"];\r\n  setInterval(function () {\r\n    count++;\r\n    $(\"#word\").fadeOut(400, function () {\r\n      $(this)\r\n        .text(food[count % food.length])\r\n        .fadeIn(400);\r\n    });\r\n  }, 4000);\r\n}\r\n\r\nexport default Sp;\r\n","import React from \"react\";\r\nimport \"./Search.css\";\r\nimport location from './location'\r\nimport App from \"./App\";\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport { CgArrowLongRight } from \"react-icons/cg\";\r\nimport $ from \"jquery\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Search extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      context: props.context,\r\n      latitude: null,\r\n      longitude: null,\r\n      userAddress: null\r\n    };\r\n\r\n    this.getLocation = this.getLocation.bind(this);\r\n    this.getCoordinates = this.getCoordinates.bind(this);\r\n    this.reversegeocode = this.reversegeocode.bind(this);\r\n\r\n  }\r\n\r\n\r\n\r\n  getLocation() {\r\n\r\n    if (navigator.geolocation) {\r\n\r\n      navigator.geolocation.getCurrentPosition(this.getCoordinates, null,\r\n        { maximumAge: 10000, timeout: 5000, enableHighAccuracy: false });\r\n    }\r\n\r\n\r\n\r\n\r\n    else {\r\n      console.log(\"Not Available\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  getCoordinates(position) {\r\n    console.log(position.coords.latitude);\r\n\r\n\r\n\r\n    this.setState({\r\n      latitude: position.coords.latitude,\r\n      longitude: position.coords.longitude\r\n\r\n    })\r\n\r\n    this.reversegeocode();\r\n  }\r\n\r\n\r\n  reversegeocode() {\r\n    var apiKey = `AIzaSyBwkDQjGoyB3s2DxdIAdax0_pWeeMFNN1o`;\r\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.state.latitude},${this.state.longitude}&sensor=false&key=${apiKey}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (this.setState) {\r\n          $(\"#fontarr\").attr(\"value\", data.results[0].formatted_address);\r\n\r\n\r\n        }\r\n\r\n      })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    // Destructuring state\r\n\r\n    const { userAddress } = this.state\r\n\r\n    window.onload = function () {\r\n\r\n\r\n      document.getElementById(\"fontarr\").click();\r\n\r\n    }\r\n    return (\r\n\r\n      <div className=\"Search\">\r\n        <div className=\"food\">\r\n          <h1 id=\"food\">Want </h1> <h1 id=\"word\"> </h1>\r\n          <p>Food, Drinks and more available for delivery and Pickup.</p>\r\n        </div>\r\n        <div className=\"arrows\">\r\n\r\n          <input type=\"text\" id=\"fontarr\" placeholder=\"Location\" onClick={this.getLocation} />\r\n\r\n\r\n          <button id=\"arrow1\" size=\"5em\" style={{ position: \"absolute\" }}> <ArrowForwardIosIcon /> </button>\r\n\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Search;\r\n","import firebase from \"firebase\";\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n\r\n\r\n    apiKey: \"AIzaSyBqHCXn_VEyFU4ByaYM7aeWSDfSvEmCyFg\",\r\n    authDomain: \"cravings-288600.firebaseapp.com\",\r\n    databaseURL: \"https://cravings-288600.firebaseio.com\",\r\n    projectId: \"cravings-288600\",\r\n    storageBucket: \"cravings-288600.appspot.com\",\r\n    messagingSenderId: \"770742140745\",\r\n    appId: \"1:770742140745:web:4f9dddc7b7a2c0a6112498\",\r\n    measurementId: \"G-L8QL8ZCJKN\",\r\n\r\n\r\n\r\n});\r\n\r\nconst auth = firebase.auth();\r\n\r\nexport default auth; ","import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './Login.css';\r\nimport ReactLogo from './cravin.svg'\r\nimport auth from './firebase';\r\n\r\n\r\nfunction Login() {\r\n    const history = useHistory();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const login = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n\r\n        auth.signInWithEmailAndPassword(email, password)\r\n            .then((auth) => {\r\n\r\n                history.push(\"/\");\r\n\r\n            })\r\n            .catch(e => alert(e.message));\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"login\" >\r\n            <Link to=\"/\">\r\n\r\n                <img src={ReactLogo} />\r\n                <span id=\"appname\">Cravings </span>\r\n\r\n            </Link>\r\n\r\n            <div className=\"login_form\">\r\n                <h1> Sign in </h1>\r\n                <form>\r\n                    <h5> Email</h5>\r\n                    <input value={email} onChange={event => setEmail(event.target.value)} type=\"email\" />\r\n                    <h5>Password</h5>\r\n                    <input value={password} onChange={event => setPassword(event.target.value)} type=\"password\" id=\"giveInput\" />\r\n                    <input type=\"checkbox\" /> Show Password\r\n                    <button onClick={login}>Sign In</button>\r\n\r\n                </form>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport HeaderNav from \"./HeaderNav\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Sp from \"./timer\";\nimport Search from \"./Search\";\nimport Login from \"./Login\";\n\n\n\n\n\nfunction App() {\n  Sp();\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <HeaderNav />\n            <Search />\n\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/signup1\">\n            <h1> Signup </h1>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Search from \"./Search\";\nimport Sp from \"./timer\";\nimport HeaderNav from \"./HeaderNav\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\n\n\nReactDOM.render(\n\n\n\n  <App></App>,\n\n\n  document.getElementById(\"root\")\n);\n\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cravin.f2f2dd6d.svg\";"],"sourceRoot":""}